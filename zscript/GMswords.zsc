struct swordtype
{
	string Name;
	int Might;
	float Speed;
	float Critical;
	int Durability;
	string Picture;
	
	void make(string Name, int Might, float Speed, float Critical, int Durability, string Picture)
	{
		self.Name = Name;
		self.Might = Might;
		self.Speed = Speed;
		self.Critical = Critical;
		self.Durability = Durability;
		self.Picture = Picture;
	}
}

class GMBaseSword : GMBaseWeapon
{
	swordtype SwordTypes[2];
	override void BeginPlay()
	{
		super.BeginPlay();
		// The sword database. There'll eventually be one for tomes.
		SwordTypes[0].make("SWORD_SWD1", 1, 0.95, 0.03, 50, "PNCH");
		SwordTypes[1].make("SWORD_SWD2", 1, 0.95, 0.03, 50, "FPAN");
		
		// Give the player the initial stats I guess...or do I do that in here?
	}
	
	int SwordSwing; // Tracks how far across the screen the melee attack is.
	int SwordBusy; // Is an attack currently happening?
	
	action void GM_SwordAttack()
	{
		if ( invoker.SwordBusy != 1 ) { 
			A_Overlay(69, "SwordSwing");
		}
	}
	
	States
	{
	Ready:
		// Weapon depletion logic. Save this for later.
		/* TNT1 A 0 {
			if ( CountInv("WWGMSwordUses") <= 0 )
			{
				A_Log("Your sword has broken!");
				A_TakeInventory(player.ReadyWeapon.GetClassName () );
				A_SelectWeapon("GMNoSword");
			}
		} */
		TNT1 A 1 A_WeaponReady;
		// We'll figure out on screen idle sprites later. Gonna be a pain.
		Goto Ready;
	Fire:
		"----" A 1 Offset(-999, 0) {
			if ( invoker.SwordBusy != 1 ) { return ResolveState("SwordSwing"); }
			return ResolveState(null);
		}
		Goto Ready;
	SwordSwing:
		"----" A 0 {
			invoker.SwordBusy = 1;
			// !!TODO - Here's also where I'd be deciding the onscreen graphic for attacks,
			// but I have no idea how to do that right now.
		}
		"----" A 0 {
			A_WeaponOffset(-160, 8);
			A_PlaySound("mummy/attack1", CHAN_WEAPON);
		}
	SwordContinue:
		"----" A 1;
		"----" A 0
		{
			
			int GMMeleeDamage = ( GrandmasterPlayer(invoker.owner).GMStrength +  );
			//A_LogInt(GMMeleeDamage);
			if ( invoker.SwordSwing == 10 )
			{
				invoker.SwordSwing = 0;
				A_TakeInventory("MeleeHitSomething", 999); // For safety
				return ResolveState("SwordFinish"); // Pan's made it across the screen, erase it.
			}
			A_WeaponOffset(80, 12, WOF_INTERPOLATE|WOF_ADD);
			if ( CountInv("MeleeHitSomething") == 1 )
			{
			invoker.SwordSwing = 10;

			return ResolveState("SwordPreRecoil");
			}
			else
			{
				A_CustomPunch(GMMeleeDamage,1,0,"SwordHitPuff", 100);
			}
			invoker.SwordSwing++;
			return ResolveState("SwordContinue");
		}
		Goto Ready;
	SwordPreRecoil:
		"----" AAAA 1 A_WeaponOffset(random(-2, 0), random(-2, 0), WOF_ADD);
	SwordRecoil:
		"----" A 1 A_WeaponOffset((-12 + random(-2, 2)), (24 + random(-2, 2)), WOF_INTERPOLATE|WOF_ADD);
		"----" A 0
		{
			if ( invoker.SwordSwing > 0 )
			{
				invoker.SwordSwing--;
				return ResolveState("SwordRecoil");
			}
			else
			{
				return ResolveState("SwordFinish");
			}
		}
		Goto Ready;
	SwordFinish:
		"----" A 5 {
			if ( player.ReadyWeapon.GetClassName() != 'GMNoSword' && CountInv("MeleeHitSomething") == 1 )
			{
				// A_TakeInventory("WWGMSwordUses", 1, TIF_NOTAKEINFINITE);
				if (    GrandmasterPlayer(invoker.owner).GMSwordExp < 100 &&
				GrandmasterPlayer(invoker.owner).GMSwordSkill != 6 &&
				CountInv("MeleeHitEnemy") != 0 )
				{
					GrandmasterPlayer(invoker.owner).GMSwordExp++;
					if ( GrandmasterPlayer(invoker.owner).GMSwordExp == 100 )
					{
						GrandmasterPlayer(invoker.owner).GMSwordSkill++;
						GrandmasterPlayer(invoker.owner).GMSwordExp = 0;
						A_Log("Sword skill has increased!");
					}
					A_TakeInventory("MeleeHitEnemy", 999);
				}
			}
		}
		"----" A 0 {
			invoker.SwordBusy = 0;
			A_TakeInventory("MeleeHitSomething", 999);
		}
		Goto Ready;
	}
}

class MeleeHitSomething : Inventory {}
class MeleeHitEnemy : Inventory {}

class SwordHitPuff : Actor
{
	default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+PUFFONACTORS
		+PUFFGETSOWNER
		+THRUGHOST
		+NOEXTREMEDEATH
		activesound "";
		attacksound "mummy/attack2";
		seesound "mummy/attack2";
	}
	states
	{
	Spawn:
	Melee:
		TNT1 A 0 A_GiveToTarget("MeleeHitEnemy", 1);
	Crash:
		// TNT1 AAAAA 0 NoDelay A_SpawnItemEx("GunSmoke", 0,0,0, random(-1,1),random(-1,1),random(-1,1), 0, SXF_NOCHECKPOSITION)
		TNT1 A 0 A_GiveToTarget("MeleeHitSomething", 1);
		TNT1 A 5 A_Quake(3,10,0,100,"");
		stop;
	}
}
